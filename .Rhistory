## Load package
library("psych")
data(bfi)
write.csv(bfi, file = "./Data/BFI_Data.csv", col.names = TRUE, row.names = FALSE, sep = ";")
write.csv(bfi, file = "./Data/BFI_Data.csv", col.names = TRUE, row.names = FALSE)
write.csv(bfi, file = "./Data/BFI_Data.csv", row.names = FALSE)
?write.csv
write.csv(bfi, file = "./Data/BFI_Data.csv", row.names = FALSE, na = "")
write.table(bfi, file = "./Data/BFI_Data.csv", row.names = FALSE, na = "", sep = ";")
save(bfi, file = "./Data/BFI_Data.RData")
dat <- read.csv(
file = "./Data/BFI_Data.csv", # file argument specifies file holding the data (and location)
header = TRUE, # header argument specifies whether there are variable names in top line
sep = ";"
) # sep argument specifies how data entries are separated (open as with notepad to check this)
# There are different ways of loading in the data
load("./Data/BFI_Data.RData") # Load is helpful and quick if you use RData files
rm(bfi) # let's remove this again
colnames(dat)
# This dataset is actually freely available in the psych package
library("psych")
data(bfi)
rm(bfi)
colnames(dat)
head(dat)
head(dat, 3)
View(dat)
tail(dat, 6)
str(dat)
1:15
15:1
5:25
1:10
numbers <- 1:10
numbers
1:10
numbers <- 1:10
numbers
numbers2 = 10:1
numbers2
numbers[1:5]
numbers[8]
numbers[10:5]
dat[, 2]
dat[1, 2:3]
dat[2:3, 1:5]
dat$A1
colnames(dat)
dat$gender[5:10]
dat[5:10,]$gender
dat[5:10, 26]
dat[5:10, "gender"]
c("Bernd", "David")
c(1, 5, 2)
names <- c("Bernd", "David")
data.frame(Variable1 = c(1, 5, 2),
Variable2 = c("Bernd", "David", "Simon"))
namesandnumbers <- data.frame(Variable1 = c(1, 5, 2),
Variable2 = c("Bernd", "David", "Simon"))
namesandnumbers
c(2.3, 2.55, 2.777)
round(c(2.3, 2.55, 2.777))
round(c(2.3, 2.55, 2.777), 1)
round(c(2.3, 2.55, 2.777), 2)
rnorm(20, mean = 100, sd = 15)
fakedat <- data.frame(fakeIQ = rnorm(100, mean = 100, sd = 15))
head(fakedat)
fakedat$fakeBMI <- round(rnorm(100, mean = 24, sd = 3))
head(fakedat)
table(fakedat$fakeBMI)
table(fakedat$fakeIQ) # oops....
fakedat$fakeIQ <- round(fakedat$fakeIQ)
head(fakedat)
table(fakedat$fakeBMI)
table(fakedat$fakeBMI)
table(fakedat$fakeIQ) # oops....
fakedat <- data.frame(fakeIQ = rnorm(100, mean = 100, sd = 15))
head(fakedat)
table(fakedat$fakeIQ) # oops....
table(round(fakedat$fakeIQ))
summary(fakedat$fakeIQ)
summary(fakedat$fakeBMI)
fakedat$fakeBMI <- round(rnorm(100, mean = 24, sd = 3))
summary(fakedat$fakeBMI)
summary(dat$A1)
hist(fakedat$fakeBMI)
hist(fakedat$fakeIQ)
hist(dat$age)
plot(x = fakedat$fakeBMI, y = fakedat$fakeIQ)
plot(fakedat$fakeBMI, fakedat$fakeIQ)
with(fakedat, plot(fakeBMI, fakeIQ))
## What does the lm function do?
lm(fakeIQ ~ fakeBMI, data = fakedat)
fakemodel <- lm(fakeIQ ~ fakeBMI, data = fakedat)
summary(fakemodel)
plot(fakemodel)
str(fakemodel)
hist(fakemodel$residuals)
qqnorm(fakemodel$residuals)
qqline(fakemodel$residuals)
fakedat$fakepreIQ <- fakedat$fakeIQ + rnorm(100, mean = 0, sd = 10)
fakemodel <- lm(fakeIQ ~ fakeBMI + fakepreIQ, data = fakedat)
summary(fakemodel)
with(fakedat, plot(fakepreIQ, fakeIQ))
abline(lm(fakeIQ ~ fakepreIQ, data = fakedat))
# install.packages("ggplot2") # install ggplot2 package if not done already
library("ggplot2")
ggplot(fakedat, aes(x = fakepreIQ, y = fakeIQ)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE, colour = "darkblue") +
ylab("Fake IQ") +
xlab("Fake Pre-IQ") +
theme_bw()
colnames(dat)
A.items <- paste("A", 1:5, sep = "")
A.items
A.items <- paste("A", 1:5, sep = "")
A.items
dat$A_sum <- rowSums(dat[, A.items], na.rm = FALSE) # na.rm: how to handle missing data
summary(dat$A.items)
summary(dat$A_sum)
dat$A_mean <- rowMeans(dat[, A.items], na.rm = FALSE)
summary(dat$A_mean)
hist(dat$A_sum)
with(dat, plot(A3, A_sum))
## You can also assess variables based on a criterion (instead of row number etc.)
dat$A_sum[dat$A_sum == 10] # missing values make things complicated sometimes...
# What is is.na?
is.na(NA)
# What is is.na?
is.na(c(1, NA))
dat$A_sum[dat$A_sum >= 20 & !is.na(dat$A_sum)]
dat$A_sum[dat$A_sum >= 25 & !is.na(dat$A_sum)]
dat$A_sum[dat$A_sum != 25 & !is.na(dat$A_sum)]
dat$A_sum[dat$A_sum != 10 & !is.na(dat$A_sum)]
dat[!is.na(dat$A_sum), "A1"]
dat[!is.na(dat$A_sum), "A1"]
dat[!is.na(dat$A_sum) & dat$A1 > 1, "A1"]
dat[!is.na(dat$A_sum) & dat$A1 > 3, "A1"]
dat[!is.na(dat$A_sum) & dat$A1 > 4, "A1"]
summary(dat$A_sum)
## You can categorise variables (e.g., agreeable/ not agreeable). Easiest is dichotomisation
dat$agree <- ifelse(dat$A_sum >= 21, 1, 0)
cbind(dat$A_sum, dat$agree)
dat$agree <- ifelse(dat$A_sum >= 21, "Agreeable", "Not Agreeable")
cbind(dat$bdi_sum, dat$agree)
ggplot(dat[!is.na(dat$A_sum), ], aes(x = A1, y = A_sum)) +
geom_count(aes(color = agree)) +
xlab("Agreeableness: Item 1") +
ylab("Agreeableness: Sum-Score") +
scale_size(guide = "none") +
theme_bw() +
theme(legend.position = "top",
legend.title = element_blank())
for(i in 1:10)  {
print(i)
}
for(i in 1:10)  {
i^2
}
for(i in 1:10)  {
i^2
}
for(i in 1:10)  {
print(i^2)
}
while(i < 10) {
print(i^2)
i+1
}
?while
)
??while
while (condition) {
}
i = 2
while(i < 10) {
print(sqrt())
i+1
}
i = 2
while(i < 10) {
print(sqrt(i))
i = i+1
}
pooledSD <- function(n1, n2, sd1, sd2)  {
pooledSD = sqrt(
((n1 - 1) * sd1^2 + (n2 - 1) * sd2^2) /
(n1 + n2)
)
return(pooledSD)
}
pooledSD(n1 = 20, n2 = 40, sd1 = 5, sd2 = 10)
library("psych")
data(bfi)
head(bfi)
categories <- data.frame(a = c("apple", "pear", "apple", "pear", "machine"),
b = c("fruit", "fruit", "fruit", "fruit", "fruit"))
categories <- data.frame(a = c("apple", "pear", "apple", "pear", "machine"),
b = c("fruit", "fruit", "fruit", "fruit", "fruit"))
for(i in 1:nrow(categories))  {
if(categories[i, "a"] %in% c("apple", "pear") == FALSE) {
categories[i, "b"] = "not a fruit"
}
}
categories <- data.frame(a = c("apple", "pear", "apple", "pear", "machine"),
b = c("fruit", "fruit", "fruit", "fruit", "fruit"))
# Check whether the fruit category wrongly includes something other than apple or pear
for(i in 1:nrow(categories))  {
if(categories[i, "a"] == "apple" | categories[i, "a"] == "pear") {
categories[i, "b"] = "not a fruit"
}
}
categories <- data.frame(a = c("apple", "pear", "apple", "pear", "machine"),
b = c("fruit", "fruit", "fruit", "fruit", "fruit"))
categories
i = 1
categories[i, "a"] == "apple"
categories[i, "a"] == "apple" | categories[i, "a"] == "pear"
categories[i, "b"] = "not a fruit"
categories[i, "b"]
categories <- data.frame(a = as.character(c("apple", "pear", "apple", "pear", "machine")),
b = as.character(c("fruit", "fruit", "fruit", "fruit", "fruit")))
# Check whether the fruit category wrongly includes something other than apple or pear
for(i in 1:nrow(categories))  {
if(categories[i, "a"] == "apple" | categories[i, "a"] == "pear") {
categories[i, "b"] = "not a fruit"
}
}
categories[i, "b"]
categories <- data.frame(a = as.character(c("apple", "pear", "apple", "pear", "machine")),
b = as.character(c("fruit", "fruit", "fruit", "fruit", "fruit")))
str(categories)
?data.frame
categories <- data.frame(a = c("apple", "pear", "apple", "pear", "machine"),
b = c("fruit", "fruit", "fruit", "fruit", "fruit"),
stringsAsFactors = FALSE)
for(i in 1:nrow(categories))  {
if(categories[i, "a"] == "apple" | categories[i, "a"] == "pear") {
categories[i, "b"] = "not a fruit"
}
}
print(categories)
for(i in 1:nrow(categories))  {
if(categories[i, "a"] != "apple" & categories[i, "a"] != "pear") {
categories[i, "b"] = "not a fruit"
}
}
print(categories)
categories <- data.frame(a = c("apple", "pear", "apple", "pear", "machine"),
b = c("fruit", "fruit", "fruit", "fruit", "fruit"),
stringsAsFactors = FALSE)
for(i in 1:nrow(categories))  {
if(categories[i, "a"] != "apple" & categories[i, "a"] != "pear") {
categories[i, "b"] = "not a fruit"
}
}
print(categories)
rm(list = ls())
test = 1
rm(list = ls())
getwd()
setwd("C:/Users/nkapp/OneDrive/Documents")
getwd()
list.files()
setwd("C:/Users/nkapp/OneDrive/Documents/R_Intro")
plot(1:10)
?sd
test = 1
mean(1:10)
mean(1:10)
dat <- read.csv(
file = "./Data/BFI_Data.csv", # file argument specifies file holding the data (and location)
header = TRUE, # header argument specifies whether there are variable names in top line
sep = ";"
) # sep argument specifies how data entries are separated (open as with notepad to check this)
getwd()
?read.csv
dat <- read.csv(
file = "./Data/BFI_Data.csv", # file argument specifies file holding the data (and location)
header = TRUE, # header argument specifies whether there are variable names in top line
sep = ","
)
head(dat)
dat <- read.csv(
file = "./Data/BFI_Data.csv", # file argument specifies file holding the data (and location)
header = TRUE, # header argument specifies whether there are variable names in top line
sep = ";"
)
head(dat)
View(dat)
load("./Data/BFI_Data.RData") # Load is helpful and quick if you use RData files
# This dataset is actually freely available in the psych package
install.packages("psych")
data(bfi)
# This dataset is actually freely available in the psych package
#install.packages("psych")
library("psych")
data(bfi) # it can be loaded like this (no need to remember this approach for your own data)
?bfi # This is how you get some information on the data
dat = read.csv(
file = "./Data/BFI_Data.csv", # file argument specifies file holding the data (and location)
header = TRUE, # header argument specifies whether there are variable names in top line
sep = ";"
)
dat = bfi
rm(bfi)
View(dat)
colnames(dat)
head(dat)
head(dat, 3)
tail(dat, 6)
colnames(dat)[1:5]
head(colnames(dat))
str(dat)
1:15
5:25
15:1
1:15:2
1:15 / 10
seq(from = 1, to = 2, by= 5)
seq(from = 1, to = 2, by= 0.05)
?seq
1:10
numbers <- 1:10
numbers <- 1:10
numbers
numbers2 = 10:1
numbers2
numbers
numbers[1:5]
numbers[8]
numbers[10:5]
dat[, 2]
dat[1, 2:3]
# Get length
length(1:10)
length(dat)
length(dat[,2])
nrow(dat)
ncol(dat)
colnames(dat)
dat$A1
dat$education
dat$gender[5:10]
dat[5:10,]$gender
dat[5:10, 26]
dat[5:10, "gender"]
c("Bernd", "David")
c(1, 5, 2)
names <- c("Bernd", "David")
dat[5:10, c("gender", "education")]
namesandnumbers <- data.frame(Variable1 = c(1, 5, 2),
Variable2 = c("Bernd", "David", "Simon"))
namesandnumbers
list(namesandnumbers,
test = 1:10)
as.numeric("1")
"1"
class("1")
str(dat)
c(2.3, 2.55, 2.777)
round(c(2.3, 2.55, 2.777))
round(c(2.3, 2.55, 2.777), 1)
round(c(2.3, 2.55, 2.777), 2)
?rnorm
rnorm(20, mean = 100, sd = 15)
fakedat <- data.frame(fakeIQ = rnorm(100, mean = 100, sd = 15))
head(fakedat)
fakedat$fakeBMI <- round(rnorm(100, mean = 24, sd = 3))
head(fakedat)
table(fakedat$fakeBMI)
prop.table(table(fakedat$fakeBMI))
prop.table(table(fakedat$fakeBMI)) * 100
head(fakedat)
table(fakedat$fakeIQ) # oops....
table(round(fakedat$fakeIQ))
summary(fakedat$fakeIQ)
sd(fakedat$fakeIQ)
mean(fakedat$fakeIQ)
median(fakedat$fakeIQ)
min(fakedat$fakeIQ)
max(fakedat$fakeIQ)
sd(fakedat$fakeIQ)
mean(c(1, 3, 5))
mean(c(1, 3, 5, NA))
mean(c(1, 3, 5, NA), na.rm = TRUE)
?mean
hist(fakedat$fakeBMI)
hist(fakedat$fakeIQ)
hist(dat$age)
plot(x = fakedat$fakeBMI, y = fakedat$fakeIQ)
with(fakedat, plot(fakeBMI, fakeIQ))
## What does the lm function do?
lm(fakeIQ ~ fakeBMI, data = fakedat)
fakemodel <- lm(fakeIQ ~ fakeBMI, data = fakedat)
summary(fakemodel)
plot(fakemodel)
str(fakemodel)
hist(fakemodel$residuals)
qqnorm(fakemodel$residuals)
qqline(fakemodel$residuals)
qqnorm(fakemodel$residuals)
qqline(fakemodel$residuals)
plot(fitted(fakemodel), residual(fakemodel))
plot(fitted(fakemodel), residuals(fakemodel))
fakedat$fakepreIQ <- fakedat$fakeIQ + rnorm(100, mean = 0, sd = 10)
fakemodel <- lm(fakeIQ ~ fakeBMI + fakepreIQ, data = fakedat)
fakemodel <- lm(fakeIQ ~ fakeBMI + fakepreIQ, data = fakedat)
summary(fakemodel)
fakemodel <- lm(fakeIQ ~ fakeBMI : fakepreIQ, data = fakedat)
summary(fakemodel)
fakemodel <- lm(fakeIQ ~ fakeBMI * fakepreIQ, data = fakedat)
summary(fakemodel)
license()
## How do I read in Data? --> Different ways but often you start with a .csv file
dat = read.csv(
file = "./Data/BFI_Data.csv", # file argument specifies file holding the data (and location)
header = TRUE, # header argument specifies whether there are variable names in top line
sep = ";"
) # sep argument specifies how data entries are separated (open as with notepad to check this)
fakedat <- data.frame(fakeIQ = rnorm(100, mean = 100, sd = 15))
head(fakedat)
fakedat$fakeBMI <- round(rnorm(100, mean = 24, sd = 3))
head(fakedat)
## How are prettier plots created?
# install.packages("ggplot2") # install ggplot2 package if not done already
library("ggplot2")
ggplot(fakedat, aes(x = fakepreIQ, y = fakeIQ)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE, colour = "darkblue") +
ylab("Fake IQ") +
xlab("Fake Pre-IQ") +
theme_bw()
fakedat$fakepreIQ <- fakedat$fakeIQ + rnorm(100, mean = 0, sd = 10)
ggplot(fakedat, aes(x = fakepreIQ, y = fakeIQ)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE, colour = "darkblue") +
ylab("Fake IQ") +
xlab("Fake Pre-IQ") +
theme_bw()
1:100 / 6
c(1, 4, 5, 8, 5) / 6
library("MendelianRandomization")
## Load data
load("C:/Users/nkapp/OneDrive/Documents/InflamDepSx/MR/MR_IL6")
## Load data
load("C:/Users/nkapp/OneDrive/Documents/InflamDepSx/MR/MR_IL6.RData")
il6
?mr_ivw
?mr_input
dat = il6
## Set tutorial names
dat = il6
rm(il6)
colnames(dat)
dat = dat[, c("chr", "SNP", "A1", "A2", "beta", "se", "sx.20513.beta", "sx.20513.se")]
head(dat)
colnames(dat) = c("chr", "SNP", "A1", "A2", "exp.beta", "exp.se", "out.beta", "out.se")
head(dat)
View(dat)
## Run model
mr_ivw(mr_input(snps = dat$SNP, bx = dat$exp.beta, bxse = dat$exp.se,
by = dat$out.beta, byse = dat$out.se),
model = "fixed", weights = "delta")
## Plot model
mr_plot(mr_input(snps = dat$SNP, bx = dat$exp.beta, bxse = dat$exp.se,
by = dat$out.beta, byse = dat$out.se),
error = TRUE, line = "ivw",
orientate = TRUE, interactive = FALSE, labels = TRUE) + theme_bw()
library("tidyverse")
?mr_plot
## Plot model
mr_plot(mr_input(snps = dat$SNP, bx = dat$exp.beta, bxse = dat$exp.se,
by = dat$out.beta, byse = dat$out.se),
error = TRUE, line = "ivw", orientate = TRUE, interactive = FALSE,
labels = TRUE) + theme_bw()
## Run model
mr_median(mr_input(snps = dat$SNP, bx = dat$exp.beta, bxse = dat$exp.se,
by = dat$out.beta, byse = dat$out.se),
weighting = "weighted", iterations = 10000)
## Run model
mr_egger(mr_input(snps = dat$SNP, bx = dat$exp.beta, bxse = dat$exp.se,
by = dat$out.beta, byse = dat$out.se))
?mr_egger
